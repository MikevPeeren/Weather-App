{"version":3,"sources":["components/WeatherCard.tsx","constants/weather.ts","components/SearchForm.tsx","constants/searchform.ts","App.tsx","constants/general.ts","index.tsx"],"names":["WeatherCard","props","allCitys","className","map","city","key","Card","Math","random","border","bg","style","width","height","Img","variant","src","weatherCondition","icon","Body","Title","cityName","Text","temperature","main","description","SearchForm","useState","warningText","setWarningText","JSON","parse","localStorage","getItem","setAllCitys","textInput","createRef","searchCityByTextInput","a","current","searchCityApiCall","value","apiResult","data","handleResultData","axios","get","params","q","APPID","units","response","resultData","cityObject","name","temp","weather","setItem","stringify","Fragment","ref","type","placeholder","onKeyPress","event","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"+UAoEeA,EAhDiC,SAAAC,GAAU,IAChDC,EAAaD,EAAbC,SAER,OACE,yBAAKC,UAAU,eACZD,GACCA,EAASE,KACP,SACEC,EASAC,GAVF,OAYE,kBAACC,EAAA,EAAD,CACED,IAAKE,KAAKC,SACVC,OAAO,QACPC,GAAG,QACHC,MAAO,CAAEC,MAAO,QAASC,OAAQ,UAEjC,kBAACP,EAAA,EAAKQ,IAAN,CACEC,QAAQ,MACRC,IAAG,4CAAuCZ,EAAKa,iBAAiBC,KAA7D,aAEL,kBAACZ,EAAA,EAAKa,KAAN,KACE,kBAACb,EAAA,EAAKc,MAAN,KAAahB,EAAKiB,UAClB,kBAACf,EAAA,EAAKgB,KAAN,KACE,2BCpDS,gBDmDX,IACwBlB,EAAKmB,YAC3B,6BACA,6BACA,2BCtDe,sBDkDjB,IAI8BnB,EAAKa,iBAAiBO,KAClD,6BACA,2BCvDiB,wBDuDY,IAC5BpB,EAAKa,iBAAiBQ,qB,iBE6E1BC,EAnHc,WAAO,IAAD,EACKC,mBAAS,IADd,mBAC1BC,EAD0B,KACbC,EADa,OAEDF,mBAE9BG,KAAKC,MAAMC,aAAaC,QAAQ,uBAJD,mBAE1BhC,EAF0B,KAEhBiC,EAFgB,KAO3BC,EAAYC,sBAOZC,EAAqB,uCAAG,4BAAAC,EAAA,yDACF,OAAtBH,EAAUI,QADc,gCAEFC,EAAkBL,EAAUI,QAAQE,OAFlC,QAEpBC,EAFoB,QAIZC,KACZC,EAAiBF,EAAUC,MAE3Bd,EAAe,mDAPS,2CAAH,qDAmBrBW,EAAiB,uCAAG,WAAOpC,GAAP,eAAAkC,EAAA,+EAECO,IAAMC,ICnDjC,kDDmDsD,CAChDC,OAAQ,CACNC,EAAG5C,EACH6C,MCpDa,mCDqDbC,MAAO,YANW,cAEhBC,EAFgB,yBASfA,GATe,wHAAH,sDAsBjBP,EAAmB,SAACQ,GAWxBvB,EAAe,IAEf,IAAMwB,EAAa,CACjBhC,SAAU+B,EAAWE,KACrB/B,YAAa6B,EAAW5B,KAAK+B,KAC7BtC,iBAAkBmC,EAAWI,QAAQ,IAGnCvD,GACFiC,EAAY,GAAD,mBAAKjC,GAAL,CAAeoD,KAC1BrB,aAAayB,QACX,oBACA3B,KAAK4B,UAAL,sBAAmBzD,GAAnB,CAA6BoD,QAG/BnB,EAAY,CAACmB,IACbrB,aAAayB,QAAQ,oBAAqB3B,KAAK4B,UAAU,CAACL,OAI9D,OACE,kBAAC,IAAMM,SAAP,KACE,yBAAKzD,UAAU,cACb,2BACEA,UAAU,oBACV0D,IAAKzB,EACL0B,KAAK,OACLC,YChHuB,uBDiHvBC,WAAY,SAAAC,GACQ,UAAdA,EAAM3D,KACRgC,OAIN,4BACEnC,UAAU,qBACV2D,KAAK,SACLI,QAAS,kBAAM5B,MC3HH,UD+Hd,yBAAKnC,UAAU,2BAA2B0B,IAG3C3B,GAAY,kBAAC,EAAD,CAAaA,SAAUA,ME1G3BiE,G,MAZH,WACV,OACE,yBAAKhE,UAAU,OACb,yBAAKA,UAAU,0BACb,4BAAQA,UAAU,uBChBC,6BDkBnB,kBAAC,EAAD,U,YEPRiE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c4cc2dec.chunk.js","sourcesContent":["// React\nimport React from 'react';\n\n// CSS\nimport './WeatherCard.scss';\n\n// Bootstrap\nimport Card from 'react-bootstrap/Card';\n\n// Constants\nimport {\n  TEMPERATURE,\n  WEATHER_CONDITION,\n  WEATHER_DESCRIPTION,\n} from '../constants/weather';\n\ninterface WeatherCardProps {\n  allCitys: [];\n}\n\nconst WeatherCard: React.FC<WeatherCardProps> = props => {\n  const { allCitys } = props;\n\n  return (\n    <div className=\"WeatherCard\">\n      {allCitys &&\n        allCitys.map(\n          (\n            city: {\n              cityName: string;\n              temperature: string;\n              weatherCondition: {\n                main: string;\n                icon: string;\n                description: string;\n              };\n            },\n            key,\n          ) => (\n            <Card\n              key={Math.random()}\n              border=\"light\"\n              bg=\"light\"\n              style={{ width: '15rem', height: '20rem' }}\n            >\n              <Card.Img\n                variant=\"top\"\n                src={`https://openweathermap.org/img/wn/${city.weatherCondition.icon}@2x.png`}\n              />\n              <Card.Body>\n                <Card.Title>{city.cityName}</Card.Title>\n                <Card.Text>\n                  <i>{TEMPERATURE}</i> {city.temperature}\n                  <br />\n                  <br />\n                  <i>{WEATHER_CONDITION}</i> {city.weatherCondition.main}\n                  <br />\n                  <i>{WEATHER_DESCRIPTION}</i>{' '}\n                  {city.weatherCondition.description}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n          ),\n        )}\n    </div>\n  );\n};\n\nexport default WeatherCard;\n","export const TEMPERATURE = 'Temperature:';\nexport const WEATHER_CONDITION = 'Weather Condition:';\nexport const WEATHER_DESCRIPTION = 'Weather Description:';\n","// React\nimport React, { createRef, useState } from 'react';\n\n// CSS\nimport './SearchForm.scss';\n\n// Components\nimport WeatherCard from './WeatherCard';\n\n// Constants\nimport {\n  SEARCH,\n  INPUT_PLACEHOLDER,\n  API_URL_WEATHER,\n  API_KEY,\n} from '../constants/searchform';\n\n// Api\nimport axios from 'axios';\n\nconst SearchForm: React.FC = () => {\n  const [warningText, setWarningText] = useState('');\n  const [allCitys, setAllCitys] = useState(\n    // @ts-ignore\n    JSON.parse(localStorage.getItem('localStorageCitys')),\n  );\n\n  const textInput = createRef<HTMLInputElement>();\n\n  /**\n   * Based on the input value make API call and handle the results.\n   *\n   * @returns {void}\n   */\n  const searchCityByTextInput = async () => {\n    if (textInput.current !== null) {\n      const apiResult = await searchCityApiCall(textInput.current.value);\n\n      if (apiResult.data) {\n        handleResultData(apiResult.data);\n      } else {\n        setWarningText('This city could not be found. Please try again.');\n      }\n    }\n  };\n\n  /**\n   * The call towards OpenWeatherApi happends here\n   *\n   * @param {string} city\n   *\n   * @returns {object}\n   */\n  const searchCityApiCall = async (city: string) => {\n    try {\n      const response = await axios.get(API_URL_WEATHER, {\n        params: {\n          q: city,\n          APPID: API_KEY,\n          units: 'metric',\n        },\n      });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  /**\n   * Handles the data that was returned from the API call\n   *\n   * @param resultData\n   *\n   * @returns {void}\n   */\n  const handleResultData = (resultData: {\n    name: string;\n    main: { temp: string };\n    weather: [\n      {\n        main: string;\n        icon: string;\n        description: string;\n      },\n    ];\n  }) => {\n    setWarningText('');\n\n    const cityObject = {\n      cityName: resultData.name,\n      temperature: resultData.main.temp,\n      weatherCondition: resultData.weather[0],\n    };\n\n    if (allCitys) {\n      setAllCitys([...allCitys, cityObject]);\n      localStorage.setItem(\n        'localStorageCitys',\n        JSON.stringify([...allCitys, cityObject]),\n      );\n    } else {\n      setAllCitys([cityObject]);\n      localStorage.setItem('localStorageCitys', JSON.stringify([cityObject]));\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"SearchForm\">\n        <input\n          className=\"SearchForm__input\"\n          ref={textInput}\n          type=\"text\"\n          placeholder={INPUT_PLACEHOLDER}\n          onKeyPress={event => {\n            if (event.key === 'Enter') {\n              searchCityByTextInput();\n            }\n          }}\n        />\n        <button\n          className=\"SearchForm__button\"\n          type=\"submit\"\n          onClick={() => searchCityByTextInput()}\n        >\n          {SEARCH}\n        </button>\n        <div className=\"SearchForm__warningText\">{warningText}</div>\n      </div>\n\n      {allCitys && <WeatherCard allCitys={allCitys}></WeatherCard>}\n    </React.Fragment>\n  );\n};\n\nexport default SearchForm;\n","export const SEARCH = 'SEARCH';\nexport const INPUT_PLACEHOLDER = 'Search for a city...';\n\nexport const API_URL_WEATHER =\n  'https://api.openweathermap.org/data/2.5/weather';\n// Please do not steal :(\nexport const API_KEY = '3551881c2b178c722c3ee7657e78f676';\n","// React\nimport React from 'react';\n\n// Components\nimport SearchForm from './components/SearchForm';\n\n// CSS\nimport './App.scss';\n\n// Constants\nimport { HEADER_TEXT } from './constants/general';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__search--container\">\n        <header className=\"App__search--header\">{HEADER_TEXT}</header>\n\n        <SearchForm />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export const HEADER_TEXT = 'Weather App. ðŸŒž';\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Main App\nimport App from './App';\n\n// CSS\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}